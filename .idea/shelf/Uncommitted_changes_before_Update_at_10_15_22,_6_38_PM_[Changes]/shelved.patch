Index: src/projecttwo/GymManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projecttwo;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n/**\n * Processes the inputs and calls other classes based on the input\n * Has methods for checking if the inputs are valid and printing out statements accordingly\n *\n * @author Chris Tai, Shreyank Yelagoila\n */\npublic class GymManager {\n    private MemberDatabase memData = new MemberDatabase();\n\n    private ClassSchedule classSchedule = new ClassSchedule();\n    private Scanner scanUserInput = new Scanner(System.in);\n    private String input;\n    private static final int NOT_FOUND = -1;\n    private static final int ALREADY_CHECKED_IN = -2;\n    private static final int NOT_CHECKED_IN = -3;\n    private static final int ADULT = 18;\n\n    /**\n     * Calls methods based on user input\n     * Reads user input and, depending on the command put in, runs a method associated with that command\n     * and other inputted data\n     */\n    public void run() {\n        System.out.println(\"Gym Manager running...\");\n        while (!(input = scanUserInput.nextLine()).equals(\"Q\")) {\n            String[] inputData = input.split(\" \");\n            if(inputData.length > 0 && inputData[0].length() > 0){\n                switch (inputData[0].charAt(0)) {\n                    case 'L':\n                        load(inputData[0]);\n                        break;\n                    case 'A':\n                        addMember(inputData);\n                        break;\n                    case 'R':\n                        removeMember(inputData);\n                        break;\n                    case 'P':\n                        printMembers(inputData[0]);\n                        break;\n                    case 'S':\n                        printClasses(inputData[0]);\n                        break;\n                    case 'C':\n                        checkIn(inputData);\n                        break;\n                    case 'D':\n                        dropClass(inputData);\n                        break;\n                    default:\n                        System.out.println(inputData[0] + \" is an invalid command!\");\n                }\n            }\n        }\n        System.out.println(\"Gym Manager terminated.\");\n    }\n\n    private void load(String loadType){\n        if(loadType.equals(\"LM\")){\n            loadMembers();\n        }\n        else{\n            loadSchedule();\n        }\n    }\n\n    /**\n     *\n     */\n\n    private void loadMembers() {\n        File memberList = new File(\"/Users/christai/IdeaProjects/Project2/src/memberList\");\n        try {\n            Scanner memberScanner = new Scanner(memberList);\n            System.out.println(\"-list of members loaded-\");\n            while (memberScanner.hasNextLine()) {\n                String[] memberInputData = memberScanner.nextLine().replaceAll(\"  \", \" \").split(\" \");\n                Member member = createMember(memberInputData, true);\n                memData.add(member);\n                System.out.println(member.toString());\n            }\n            System.out.println(\"-end of list-\");\n        }\n        catch (FileNotFoundException exception) {\n        }\n    }\n\n    private void loadSchedule(){\n        File scheduleList = new File(\"/Users/christai/IdeaProjects/Project2/src/classSchedule\");\n        try{\n            Scanner classScanner = new Scanner(scheduleList);\n            System.out.println(\"-list of classes loaded-\");\n            while(classScanner.hasNextLine()){\n                String [] classInputData = classScanner.nextLine().split(\" \");\n                FitnessClass fitClass = new FitnessClass(Time.valueOf(classInputData[2].toUpperCase()),\n                        classInputData[1], classInputData[0], Location.valueOf(classInputData[3].toUpperCase()), new Member[0]);\n                fitClass.printClass();\n                classSchedule.addClass(fitClass);\n            }\n            System.out.println(\"-end of class list-\");\n        }\n        catch(FileNotFoundException exception){\n\n        }\n    }\n\n    /**\n     * Performs checks to make sure that member data is valid\n     * Checks location, if the member is already in database, and if the member's date of birth and\n     * expiration date are valid\n     *\n     * @param memberToAdd contains member data as elements of an array\n     */\n    private void addMember(String[] memberToAdd) {\n        if(!memberToAdd[0].equals(\"AF\") && !memberToAdd[0].equals(\"AP\") && !memberToAdd[0].equals(\"A\")){\n            System.out.println(memberToAdd[0] + \" is an invalid command!\");\n            return;\n        }\n        if(!isValidLocation(memberToAdd[4])){\n            return;\n        }\n        Member memToAdd = createMember(memberToAdd, false);\n        Date currentDate = new Date();\n        Date expirationDate = currentDate;\n        expirationDate.setExpire();\n        for (int i = 0; i < memData.size(); i++) {\n            if (memData.returnList()[i].equals(memToAdd)) {\n                System.out.println(memToAdd.fullName() + \" is already in the database.\");\n                return;\n            }\n        }\n        if (!isOldEnough(memToAdd.dob())) {\n            return;\n        }\n        if (!(memToAdd.dob().isValid())) {\n            System.out.println(\"DOB \" + memberToAdd[3] + \": invalid calendar date!\");\n            return;\n        }\n        if (memData.add(memToAdd))\n            System.out.println(memToAdd.fullName() + \" added.\");\n    }\n\n    private Member createMember(String[] memberToAdd, boolean fromFile){\n        String firstName;\n        String lastName;\n        Date dob;\n        Date expirationDate;\n        Location location = Location.valueOf(memberToAdd[4].toUpperCase());\n        if(!fromFile){\n            firstName = memberToAdd[1];\n            lastName = memberToAdd[2];\n            dob = new Date(memberToAdd[3]);\n            expirationDate = new Date();\n            if(memberToAdd[0].equals(\"AF\")){\n                expirationDate.setExpire();\n                return new Family (firstName, lastName, dob, expirationDate, location, 1);\n            }\n            else if(memberToAdd[0].equals(\"AP\")){\n                expirationDate.setExpire();\n                return new Premium (firstName, lastName, dob, expirationDate, location, 3);\n            }\n        }\n        else{\n            firstName = memberToAdd[0];\n            lastName = memberToAdd[1];\n            dob = new Date(memberToAdd[2]);\n            expirationDate = new Date(memberToAdd[3]);\n        }\n        expirationDate.setExpire();\n        return new Member(firstName, lastName, dob, expirationDate, location);\n    }\n\n    private Family createFamilyMember(String[] memberToAdd){\n        String firstName = memberToAdd[0];\n        String lastName = memberToAdd[1];\n        Date dob = new Date(memberToAdd[2]);\n        Date expirationDate = new Date(memberToAdd[3]);\n        Location location = Location.valueOf(memberToAdd[4]);\n        return new Family(firstName, lastName, dob, expirationDate, location, 1);\n    }\n\n    private Premium createPremiumMember(String[] memberToAdd){\n        String firstName = memberToAdd[0];\n        String lastName = memberToAdd[1];\n        Date dob = new Date(memberToAdd[2]);\n        Date expirationDate = new Date(memberToAdd[3]);\n        Location location = Location.valueOf(memberToAdd[4]);\n        return new Premium(firstName, lastName, dob, expirationDate, location, 1);\n    }\n\n    /**\n     * Prints statements depending on if a member was successfully removed\n     * Calls \"remove\" method in MemberDatabase, which returns true if the member is in the database\n     * and false otherwise\n     *\n     * @param memberToRemove contains member data as elements of an array\n     */\n    private void removeMember(String[] memberToRemove) {\n        if(!memberToRemove[0].equals(\"R\")){\n            System.out.println(memberToRemove[0] + \" is an invalid command!\");\n            return;\n        }\n        if (memData.remove(new Member(memberToRemove[1].toUpperCase(), memberToRemove[2].toUpperCase(),\n                new Date(memberToRemove[3]))))\n            System.out.println(memberToRemove[1] + \" \" + memberToRemove[2] + \" removed.\");\n        else {\n            System.out.println(memberToRemove[1] + \" \" + memberToRemove[2] + \" is not in the database.\");\n        }\n    }\n\n    /**\n     * Prints out each fitness class in the fitness chain\n     * Calls the printClass method in FitnessClass\n     */\n    private void printClasses(String input) {\n        if(input.equals(\"S\")) {\n            System.out.println(\"\\n-Fitness Classes-\");\n            for (int i = 0; i < classSchedule.getNumOfClasses(); i++) {\n                classSchedule.getClass(i).printClass();\n            }\n            System.out.println();\n        }\n        else{\n            System.out.println(input + \" is an invalid command!\");\n        }\n    }\n\n    /**\n     * Performs checks to make sure that the member is allowed to check in\n     * Checks if member's date of birth is valid, if their membership expired, if member exists,\n     * if class exists, and if member has already checked in to the class or to another class\n     *\n     * @param memberToCheckIn contains member data as elements of an array\n     */\n    private void checkIn(String[] memberToCheckIn) {\n        if(memberToCheckIn[0].equals(\"C\") || memberToCheckIn[0].equals(\"CG\")) {\n            if(memberToCheckIn[0].equals(\"CG\")){\n                System.out.println(\"still working on it\");\n                return;\n            }\n            if(!checkCredentials(memberToCheckIn)) return;\n            Member memToCheckIn = memData.getFullDetails(new Member(memberToCheckIn[4], memberToCheckIn[5],\n                    new Date(memberToCheckIn[6])));\n            if (memToCheckIn == null) {\n                System.out.println(memberToCheckIn[4] + \" \" + memberToCheckIn[5] + \" \" + memberToCheckIn[6] + \" is not in the database.\");\n                return;\n            }\n            if (memToCheckIn.expirationDate().compareTo(new Date()) < 0) {\n                System.out.println(memToCheckIn.fullName() + \" \" + memToCheckIn.dob().dateString() + \" membership expired.\");\n                return;\n            }\n            int fitClassIndex = getClassIndex(memberToCheckIn[2], memberToCheckIn[3], memberToCheckIn[1]);\n            if(fitClassIndex < 0) return;\n            FitnessClass classToCheckInto = classSchedule.returnList()[fitClassIndex];\n            if(checkLocationRestriction(memToCheckIn, classToCheckInto)) return;\n            if (checkSchedulingConflict(classToCheckInto, memToCheckIn, true)) return;\n            if (classToCheckInto.checkInMember(memToCheckIn))\n                System.out.println(memToCheckIn.fullName() + \" checked in \" + classSchedule.returnList()[fitClassIndex].className() + \".\");\n        }\n        else{\n            System.out.println(memberToCheckIn[0] + \" is an invalid comand!\");\n        }\n    }\n\n    /**\n     * Performs checks to make sure that the member can be dropped\n     * Checks if member's date of birth is valid, if the member is a participant in the class,\n     * and if the class exists\n     *\n     * @param memberToDrop contains member data as elements of a String array\n     */\n    private void dropClass(String[] memberToDrop) {\n        if(memberToDrop[0].equals(\"D\")) {\n            if(!checkCredentials(memberToDrop)) return;\n            Member memToDrop = memData.getFullDetails(new Member(memberToDrop[4], memberToDrop[5],\n                    new Date(memberToDrop[6])));\n            if (memToDrop == null) {\n                System.out.println(memberToDrop[4] + \" \" + memberToDrop[5] + \" \" + memberToDrop[6] + \" is not in the database.\");\n                return;\n            }\n            int fitClassIndex = getClassIndex(memberToDrop[2], memberToDrop[3], memberToDrop[1]);\n            if(fitClassIndex < 0){\n                return;\n            };\n            FitnessClass classToDrop = classSchedule.returnList()[fitClassIndex];\n            if (checkSchedulingConflict(classToDrop, memToDrop, false)) {\n                return;\n            }\n            if (classToDrop.dropMem(memToDrop))\n                System.out.println(memToDrop.fullName() + \" done with the class.\");\n        }\n        else{\n            System.out.println(memberToDrop[0] + \" is an invalid command!\");\n        }\n    }\n\n    private boolean checkCredentials(String[] memberCredentials){\n        if(!isValidLocation(memberCredentials[3])){\n            return false;\n        }\n        if(!isValidInstructor(memberCredentials[2])) return false;\n        if(!isValidClass(memberCredentials[1])) return false;\n        if (!isValidDateOfBirth(new Date(memberCredentials[6]))) return false;\n        return true;\n    }\n\n    /**\n     * Gets the index of the inputted class in the array of classes\n     * Also checks if the class inputted is not in the array of classes and checks if the member has already checked in\n     * if they are adding and if the member has not checked in if they are dropping\n     * @param className  the inputted class to be searched for\n     * @param instructor the inputted instructor to be searched for\n     * @param location the inputted location to be searched for\n     * @return the index of the class if it is found, and they haven't checked in, else ALREADY_CHECKED_IN if\n     * they already checked in, else NOT_FOUND\n     */\n    private int getClassIndex(String instructor, String location, String className){\n        int classExists = NOT_FOUND;\n        for(int i = 0; i < classSchedule.getNumOfClasses(); i++){\n            FitnessClass classPtr = classSchedule.returnList()[i];\n            if(classPtr.className().equalsIgnoreCase(className)){\n                if(classPtr.getInstructor().equalsIgnoreCase(instructor)){\n                    if(classPtr.getLocation().name().equalsIgnoreCase(location)){\n                        classExists = i;\n                        break;\n                    }\n                }\n            }\n        }\n        if(classExists < 0){\n            System.out.println(className + \" by \" + instructor + \" does not exists at \" + location);\n        }\n        return classExists;\n    }\n\n    /**\n     * Checks if the location exists\n     * Iterates through the locations array and finds one that equals the argument\n     *\n     * @param location To be checked against the elements of the locations array\n     * @return true if the location is in the array of locations, else false\n     */\n    private boolean isValidLocation(String location) {\n        for (Location locations : Location.values()) {\n            if (location.toUpperCase().equals(locations.name())) {\n                return true;\n            }\n        }\n        System.out.println(location + \" - invalid location.\");\n        return false;\n    }\n\n    private boolean isValidInstructor(String instructor){\n        for(int i = 0; i < classSchedule.getNumOfClasses(); i++){\n            String checkInstructor = classSchedule.returnList()[i].getInstructor();\n            if(instructor.equalsIgnoreCase(classSchedule.returnList()[i].getInstructor())){\n                return true;\n            }\n        }\n        System.out.println(instructor + \" - instructor does not exist.\");\n        return false;\n    }\n\n    private boolean isValidClass(String className) {\n        for (int i = 0; i < classSchedule.getNumOfClasses(); i++) {\n            if(className.equalsIgnoreCase(classSchedule.returnList()[i].className())){\n                return true;\n            }\n        }\n        System.out.println(className + \" - class does not exist.\");\n        return false;\n    }\n\n    /**\n     * Checks if the date of birth is a valid calendar date\n     * Calls isValid in Date Class\n     *\n     * @param dob the Member's date of birth to be checked\n     * @return false if the date of birth is invalid, else true\n     */\n    private boolean isValidDateOfBirth(Date dob) {\n        if (!(dob.isValid())) {\n            System.out.println(\"DOB \" + dob.dateString() + \": invalid calendar date!\");\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Checks if the member is less than 18 years old\n     * Compares the member's age to the current date\n     *\n     * @param checkDateOfBirth the member who is checking in's date of birth\n     * @return false if the member is under 18, else true\n     */\n    private boolean isOldEnough(Date checkDateOfBirth) {\n        Date currentDate = new Date();\n        String dob = checkDateOfBirth.dateString();\n        if (currentDate.compareTo(checkDateOfBirth) <= 0) {\n            System.out.println(\"DOB \" + dob + \": cannot be today or a future date!\");\n            return false;\n        }\n        if (currentDate.getYear() - checkDateOfBirth.getYear() < ADULT) {\n            System.out.println(\"DOB \" + dob + \": must be 18 or older to join!\");\n            return false;\n        } else if (currentDate.getYear() - checkDateOfBirth.getYear() == 18) {\n            if (currentDate.getMonth() < checkDateOfBirth.getMonth()) {\n                System.out.println(\"DOB \" + dob + \": must be 18 or older to join!\");\n                return false;\n            } else if (currentDate.getMonth() == checkDateOfBirth.getMonth()) {\n                if (currentDate.getDay() < checkDateOfBirth.getDay()) {\n                    System.out.println(\"DOB \" + dob + \": must be 18 or older to join!\");\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private boolean checkLocationRestriction(Member memToCheckIn, FitnessClass classToCheckInto){\n        if(memToCheckIn instanceof Family || memToCheckIn instanceof Premium){\n            return false;\n        }\n        else if(!memToCheckIn.getLocation().equals(classToCheckInto.getLocation())){\n            System.out.println(memToCheckIn.fullName() + \" checking in \" + classToCheckInto.getLocation().toString()\n                    + \" - standard membership location restriction.\");\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if the member has a scheduling conflict\n     * Checks if the member has already checked in if they are adding and if the member has not checked in if they are dropping\n     * If the member has checked into another class that overlaps with the class they are trying to\n     * check into, then they have a scheduling conflict\n     *\n     * @param fitClass     the class they are trying to check into\n     * @param memToCheckIn the member who is trying to check in\n     * @param checkingIn determines whether the member is checking into (true) or dropping (false) the class\n     * @return true if the member has a scheduling conflict, else false\n     */\n    private boolean checkSchedulingConflict(FitnessClass fitClass, Member memToCheckIn, boolean checkingIn) {\n        if(checkingIn) {\n            if (fitClass.findParticipant(memToCheckIn) >= 0) {\n                System.out.println(memToCheckIn.fullName() + \" has already checked in \" + fitClass.className());\n                return true;\n            }\n            for (int i = 0; i < classSchedule.returnList().length; i++) {\n                if (classSchedule.getClass(i).timeOfClass().equals(fitClass.timeOfClass())\n                        && classSchedule.getClass(i).findParticipant(memToCheckIn) >= 0) {\n                    System.out.println(\"Time conflict - \" + fitClass.className() + \", \" + fitClass.getInstructor() + \", \"\n                            + fitClass.timeOfClass().toString() + \", \" + fitClass.getLocation().toString() + \".\");\n                    return true;\n                }\n            }\n        }\n        else if(fitClass.findParticipant(memToCheckIn) < 0){\n            System.out.println(memToCheckIn.fullName() + \" did not check in.\");\n            return true;\n        }\n        return false;\n    }\n\n    private void printMembers(String sortType){\n        switch(sortType){\n            case \"P\" :\n                memData.print();\n                break;\n            case \"PC\":\n                memData.printByCounty();\n                break;\n            case \"PD\":\n                memData.printByExpirationDate();\n                break;\n            case \"PN\":\n                memData.printByName();\n                break;\n            case \"PF\":\n                memData.printWithFees();\n                break;\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/projecttwo/GymManager.java b/src/projecttwo/GymManager.java
--- a/src/projecttwo/GymManager.java	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/src/projecttwo/GymManager.java	(date 1665796162025)
@@ -261,7 +261,7 @@
             if(checkLocationRestriction(memToCheckIn, classToCheckInto)) return;
             if (checkSchedulingConflict(classToCheckInto, memToCheckIn, true)) return;
             if (classToCheckInto.checkInMember(memToCheckIn))
-                System.out.println(memToCheckIn.fullName() + " checked in " + classSchedule.returnList()[fitClassIndex].className() + ".");
+                System.out.println(memToCheckIn.fullName() + " checked in " + classSchedule.returnList()[fitClassIndex].getClassName() + ".");
         }
         else{
             System.out.println(memberToCheckIn[0] + " is an invalid comand!");
@@ -324,7 +324,7 @@
         int classExists = NOT_FOUND;
         for(int i = 0; i < classSchedule.getNumOfClasses(); i++){
             FitnessClass classPtr = classSchedule.returnList()[i];
-            if(classPtr.className().equalsIgnoreCase(className)){
+            if(classPtr.getClassName().equalsIgnoreCase(className)){
                 if(classPtr.getInstructor().equalsIgnoreCase(instructor)){
                     if(classPtr.getLocation().name().equalsIgnoreCase(location)){
                         classExists = i;
@@ -369,7 +369,7 @@
 
     private boolean isValidClass(String className) {
         for (int i = 0; i < classSchedule.getNumOfClasses(); i++) {
-            if(className.equalsIgnoreCase(classSchedule.returnList()[i].className())){
+            if(className.equalsIgnoreCase(classSchedule.returnList()[i].getClassName())){
                 return true;
             }
         }
@@ -449,13 +449,13 @@
     private boolean checkSchedulingConflict(FitnessClass fitClass, Member memToCheckIn, boolean checkingIn) {
         if(checkingIn) {
             if (fitClass.findParticipant(memToCheckIn) >= 0) {
-                System.out.println(memToCheckIn.fullName() + " has already checked in " + fitClass.className());
+                System.out.println(memToCheckIn.fullName() + " has already checked in " + fitClass.getClassName());
                 return true;
             }
             for (int i = 0; i < classSchedule.returnList().length; i++) {
                 if (classSchedule.getClass(i).timeOfClass().equals(fitClass.timeOfClass())
                         && classSchedule.getClass(i).findParticipant(memToCheckIn) >= 0) {
-                    System.out.println("Time conflict - " + fitClass.className() + ", " + fitClass.getInstructor() + ", "
+                    System.out.println("Time conflict - " + fitClass.getClassName() + ", " + fitClass.getInstructor() + ", "
                             + fitClass.timeOfClass().toString() + ", " + fitClass.getLocation().toString() + ".");
                     return true;
                 }
Index: src/projecttwo/FitnessClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projecttwo;\n\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\n\n/**\n * Defines a class for members to check in to, with a time, instructor and an array of participants\n * Has methods for printing out the class schedule, finding members checked into each class,\n * checking members in, and dropping members\n * @author Chris Tai, Shreyank Yelagoila\n */\npublic class FitnessClass {\n    private Time timeOfClass;\n    private String instructor;\n    private String className;\n    private Member[] participants;\n    private Location gymLocation;\n    private ArrayList<Member> guests;\n    private int size;\n    private final int NOT_FOUND = -1;\n\n    /**\n     * Initializes a projectone.FitnessClass that has a time, an instructor, a name, and\n     * an array of participants\n     *\n     * @param timeOfClass the time the class takes place, passed in as a Time constant\n     * @param instructor the name of the instructor, passed in as a String\n     * @param className the name of the class, passed in as a String\n     * @param participants the array of participants in the class\n     */\n    public FitnessClass(Time timeOfClass, String instructor, String className, Location gymLocation, Member[] participants) {\n        this.timeOfClass = timeOfClass;\n        this.instructor = instructor;\n        this.className = className;\n        this.participants = participants;\n        this.gymLocation = gymLocation;\n        this.size = this.participants.length;\n    }\n\n    /**\n     * Gets the name of the class\n     *\n     * @return className as a String\n     */\n    public String className() {\n        return this.className;\n    }\n\n    public Location getLocation(){ return gymLocation;}\n    public String getInstructor(){\n        return instructor;\n    }\n\n    /**\n     * Gets the time of the class\n     *\n     * @return timeOfClass as a Time object\n     */\n    public Time timeOfClass() {\n        return this.timeOfClass;\n    }\n\n    /**\n     * Prints out the class along with the participants in it\n     * Prints out the name of the class, instructor, and the time of the class, followed by each participant\n     */\n    public void printClass() {\n        DecimalFormat formatTime = new DecimalFormat(\"00\");\n        System.out.println(className.toUpperCase() + \" - \" + instructor.toUpperCase() + \", \" + timeOfClass.hour() + \":\"\n                + formatTime.format(timeOfClass.minute()) + \", \" + gymLocation);\n        if (participants.length > 0) {\n            System.out.println(\"\\t** participants **\");\n            for (int i = 0; i < size; i++) {\n                System.out.println(\"\\t\\t\" + participants[i].toString());\n            }\n        }\n    }\n\n    /**\n     * Finds the member in the array of participants\n     *\n     * @param mem the member that the method searches for\n     * @return the index of the member in the array if they exist, else NOT_FOUND\n     */\n    public int findParticipant(Member mem) {\n        for (int i = 0; i < size; i++) {\n            if (mem.equals(participants[i])) {\n                return i;\n            }\n        }\n        return NOT_FOUND;\n    }\n\n    /**\n     * Doubles the size of the participants array\n     * Creates a new array with double the size, and copies the elements over\n     */\n    private void grow() {\n        Member[] tempList = new Member[size == 0 ? 1 : size * 2];\n        for (int i = 0; i < size; i++) {\n            tempList[i] = participants[i];\n        }\n        participants = tempList;\n    }\n\n    /**\n     * Adds a member to the end of the array\n     *\n     * @param mem valid member to add to the array\n     * @return true if the member is added successfully\n     */\n    public boolean checkInMember(Member mem) {\n        if (size == participants.length) {\n            grow();\n        }\n        participants[size] = mem;\n        size++;\n        return true;\n    }\n\n    /**\n     * Removes a member from a class's participants\n     *\n     * @param mem valid member to remove from the array\n     * @return true if the member is successfully removed, false otherwise\n     */\n    public boolean dropMem(Member mem) {\n        int index = findParticipant(mem);\n        if (index >= 0) {\n            for (int i = index; i < size; i++) {\n                participants[i] = participants[i++];\n            }\n            participants[findParticipant(mem)] = participants[size - 1];\n            participants[size - 1] = null;\n            size--;\n            return true;\n        } else {\n            return false;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/projecttwo/FitnessClass.java b/src/projecttwo/FitnessClass.java
--- a/src/projecttwo/FitnessClass.java	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/src/projecttwo/FitnessClass.java	(date 1665796162037)
@@ -42,7 +42,7 @@
      *
      * @return className as a String
      */
-    public String className() {
+    public String getClassName() {
         return this.className;
     }
 
Index: src/projecttwo/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projecttwo;\n\n/**\n * A Member class that provides the constructor for a member with a first name, last name,\n * date of birth, expiration date, and where the person is located, which are added to\n * the MemberDatabase. Provides methods for comparing equality between members and converting a\n * member to a String, as well as methods to return variables.\n * @author Chris Tai, Shreyank Yelagoila\n */\npublic class Member implements Comparable<Member> {\n    private String fname;\n    private String lname;\n    private Date dob;\n    private Date expire;\n    private Location location;\n    public static final int EARLIER = -1;\n    private static final double ONE_TIME = 29.99;\n    private static final double PER_MONTH = 39.99;\n\n    /**\n     * Constructs a Member with a first name, last name, date of birth, expiration date, and location\n     *\n     * @param fname    the first name of the Member, saved as a String\n     * @param lname    the last name of the Member, saved as a String\n     * @param dob      the Member's date of birth, saved as a Date\n     * @param expire   the expiration date for the Member's membership, saved as a date\n     * @param location the place where the Member is located, which contains the town, zip code, and county\n     */\n    public Member(String fname, String lname, Date dob, Date expire, Location location) {\n        this.fname = fname;\n        this.lname = lname;\n        this.expire = expire;\n        this.dob = dob;\n        this.location = location;\n    }\n\n    /**\n     * Constructs a Member with a first name, last name, and date of birth\n     *\n     * @param fname the first name of the Member, saved as a String\n     * @param lname the last name of the Member, saved as a String\n     * @param dob   the Member's date of birth, saved as a Date\n     */\n    public Member(String fname, String lname, Date dob) {\n        this.fname = fname;\n        this.lname = lname;\n        this.dob = dob;\n        this.expire = null;\n        this.location = null;\n    }\n\n    /**\n     * Gets the full name of the Member\n     *\n     * @return the concatenation of the first and last name variables of a Member\n     */\n    public String fullName() {\n        return this.fname + \" \" + this.lname;\n    }\n\n    /**\n     * Gets the county the Member lives in\n     *\n     * @return the county that is part of the Member's location variable\n     */\n    public String county() {\n        return this.location.county();\n    }\n\n    public Location getLocation(){return this.location;}\n    public Date dob() {return this.dob;}\n\n    /**\n     * Gets the zip code the member lives in\n     *\n     * @return the zip code that is part of the Member's location variable\n     */\n    public String zipCode() {\n        return this.location.zipCode();\n    }\n\n    /**\n     * Gets the date when the Member's membership expires\n     *\n     * @return the expire variable as a Date\n     */\n    public Date expirationDate() {\n        return this.expire;\n    }\n\n    @Override\n    /**\n     * Converts a member object to a string\n     * Takes in each attribute of the member and concatenates them into a single string\n     * @return the string of the member\n     */\n    public String toString() {\n        if (expire != null && location != null) {\n            return fname + \" \" + lname + \", \" + \"DOB: \" + dob.getMonth() + \"/\" + dob.getDay() + \"/\" + dob.getYear() + \", \" +\n                    \"Membership expires \" + expire.getMonth() + \"/\" + expire.getDay() + \"/\" + expire.getYear() + \", \" +\n                    \"Location: \" + location.toString() + \", \" + location.zipCode() + \", \" + location.county();\n        } else {\n            return fname + \" \" + lname + \", \" + \"DOB: \" + dob.getMonth() + \"/\" + dob.getDay() + \"/\" + dob.getYear();\n        }\n    }\n\n    @Override\n    /**Checks if a member is equal to an object\n     * Compares the member's first name, last name, and date of birth, ignoring case\n     * @return true if all fields are the same, otherwise false\n     */\n    public boolean equals(Object obj) {\n        Member mem = (Member) obj;\n        if (this.fname.equalsIgnoreCase(mem.fname) && this.lname.equalsIgnoreCase(mem.lname) &&\n                this.dob.compareTo(mem.dob) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public double membershipFee(){\n        double fee = ONE_TIME + (3*PER_MONTH);\n        return fee;\n    }\n\n    @Override\n    /**\n     * Compares the names of two Members\n     * First compares by last name, then compares by first name\n     * @param member the member to be compared to\n     * @return 0 if the first and last names are equal\n     * @return 1 if the name of the instance of the Member precedes the name of the passed in Member\n     * @return NOT_FOUND if the name of the instance of the Member comes earlier than the name of the\n     * passed in Member\n     */\n    public int compareTo(Member member) {\n        if (this.lname.equals(member.lname)) {\n            if (this.fname.equals(member.fname)) {\n                return 0;\n            } else if (this.fname.compareTo(member.fname) < 0) {\n                return EARLIER;\n            } else {\n                return 1;\n            }\n        } else if (this.lname.compareTo(member.lname) < 0) {\n            return EARLIER;\n        } else {\n            return 1;\n        }\n\n    }\n\n    /**\n     * Runs all test cases to ensure that method is working properly\n     * @param args the Strings passed in as input are put in args\n     */\n    public static void main(String[] args) {\n        Date dateOfBirth = new Date(\"01/01/2001\");\n        //Test case 1\n        Member mem1 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        Member mem2 = new Member(\"Andrew\", \"Donovan\", dateOfBirth);\n        int expectedOutput = EARLIER;\n        int actualOutput = mem1.compareTo(mem2);\n        System.out.println(\"**Test case #1: If the first member has a last name that is earlier \" +\n                \"than the member passed in, will return EARLIER, or -1\");\n        testResult(mem1, mem2, expectedOutput, actualOutput);\n        //Test case 2\n        mem1 = new Member(\"Andrew\", \"Donovan\", dateOfBirth);\n        mem2 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        expectedOutput = 1;\n        actualOutput = mem1.compareTo(mem2);\n        System.out.println(\"**Test case #2: If the first member has a later last name but an earlier \" +\n                \"first name than the member passed in, will return 1\");\n        testResult(mem1, mem2, expectedOutput, actualOutput);\n        //Test case 3\n        mem1 = new Member(\"Andrew\", \"Campbell\", dateOfBirth);\n        mem2 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        expectedOutput = EARLIER;\n        actualOutput = mem1.compareTo(mem2);\n        System.out.println(\"**Test case #3: If the first member has the same last name as the member passed\" +\n                \" in, but an earlier first name, will return EARLIER, or -1\");\n        testResult(mem1, mem2, expectedOutput, actualOutput);\n        //Test case 4\n        mem1 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        mem2 = new Member(\"Andrew\", \"Campbell\", dateOfBirth);\n        expectedOutput = 1;\n        actualOutput = mem1.compareTo(mem2);\n        System.out.println(\"**Test case #4: If the first member has the same last name as the member passed\" +\n                \" in, but a later first name, will return 1\");\n        testResult(mem1, mem2, expectedOutput, actualOutput);\n        //Test case 5\n        mem1 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        mem2 = new Member(\"John\", \"Campbell\", dateOfBirth);\n        expectedOutput = 0;\n        actualOutput = mem1.compareTo(mem2);\n        System.out.println(\"**Test case #5: If the first member has the same first and last names as \" +\n                \"the member passed in, will return 0\");\n        testResult(mem1, mem2, expectedOutput, actualOutput);\n    }\n\n    /**\n     * Compares expected and actual outputs to see if the method is working properly\n     * @param mem1 the first member being compared\n     * @param mem2 the second member being compared\n     * @param expectedOutput the output we are looking for as a result of the method\n     * @param actualOutput the actual output we get as a result of the method\n     */\n    private static void testResult(Member mem1, Member mem2, int expectedOutput, int actualOutput) {\n        System.out.println(mem1.toString());\n        System.out.println(\"compareTo\");\n        System.out.print(mem2.toString() + \" returns \" + actualOutput);\n        if (actualOutput == expectedOutput) {\n            System.out.println(\", PASS.\\n\");\n        } else {\n            System.out.println(\", FAIL.\\n\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/projecttwo/Member.java b/src/projecttwo/Member.java
--- a/src/projecttwo/Member.java	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/src/projecttwo/Member.java	(date 1665797627142)
@@ -58,15 +58,6 @@
         return this.fname + " " + this.lname;
     }
 
-    /**
-     * Gets the county the Member lives in
-     *
-     * @return the county that is part of the Member's location variable
-     */
-    public String county() {
-        return this.location.county();
-    }
-
     public Location getLocation(){return this.location;}
     public Date dob() {return this.dob;}
 
Index: src/projecttwo/MemberDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projecttwo;\n\n/**\n * Keeps track of all members of the fitness chain\n * Contains members in an array, and has methods to find a member in the array, increase the array length,\n * add members, remove members, and print members based on different sorts\n *\n * @author Christopher Tai, Shreyank Yelagoila\n */\npublic class MemberDatabase {\n    private Member[] mlist;\n    private int size;\n    private final int NOT_FOUND = -1;\n\n    /**\n     * Initializes an array of members with a length of 4\n     */\n    public MemberDatabase() {\n        this.mlist = new Member[4];\n        size = 0;\n    }\n\n    /**\n     * Gets the Member database\n     *\n     * @return the array of Members\n     */\n    public Member[] returnList() {\n        return mlist;\n    }\n\n    /**\n     * Gets the size of the member database\n     *\n     * @return the size of the array, in integer value\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * Locates a member in the database\n     * Traverses through the array and, if a value equals the member passed in, then it has\n     * successfully located that member\n     *\n     * @param member the member to be found in the database\n     * @return the index of the member if the member exists, otherwise -1\n     */\n    private int find(Member member) {\n\n        for (int i = 0; i < size; i++) {\n            if (member.equals(mlist[i])) {\n                return i;\n            }\n        }\n        return NOT_FOUND;\n    }\n\n    /**\n     * Doubles the size of the array\n     * If the array is full, copies all previous values of the array onto a new array and\n     * sets mlist to the new array\n     */\n    private void grow() {\n        Member[] tempList = new Member[size + 4];\n        for (int i = 0; i < size; i++) {\n            tempList[i] = mlist[i];\n        }\n        mlist = tempList;\n    }\n\n    /**\n     * Adds a member to the database\n     * If the date of birth or expiration date are invalid, doesn't add. If the array is full, call grow\n     *\n     * @param member the member to be added to the database\n     * @return true if the member does not exist and the data is valid, else return false\n     */\n    public boolean add(Member member) {\n        if (size == mlist.length) {\n            grow();\n        }\n        mlist[size] = member;\n        size++;\n        return true;\n    }\n\n    /**\n     * Removes member from database\n     * If the member exists, shifts every member afterwards\n     *\n     * @param member the member to be removed from the database\n     * @return true if the member is in the database, otherwise false\n     */\n    public boolean remove(Member member) {\n        int index = find(member);\n        if (index >= 0) {\n            for (int i = index; i < size - 1; i++) {\n                int nextElement = i + 1;\n                mlist[i] = mlist[nextElement];\n            }\n            size--;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Prints the unsorted array content\n     */\n    public void print() {\n        if (size == 0) {\n            System.out.println(\"Member database is empty!\");\n            return;\n        }\n        System.out.println(\"\\n-list of members-\");\n        for (int i = 0; i < size; i++) {\n            System.out.println(mlist[i].toString());\n        }\n        System.out.println(\"-end of list\\n\");\n    } //print the array contents as is\n\n    public Member getFullDetails(Member mem) {\n        if (find(mem) >= 0) return mlist[find(mem)];\n        else {\n            return null;\n        }\n    }\n\n    /**\n     * Prints the array content sorted by county name, then by zipcode\n     */\n    public void printByCounty() {\n        if (size == 0) {\n            System.out.println(\"Member database is empty!\");\n            return;\n        }\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                Member tempSmallest = null;\n                if (mlist[i].county().compareTo(mlist[j].county()) > 0) {\n                    tempSmallest = mlist[i];\n                    mlist[i] = mlist[j];\n                    mlist[j] = tempSmallest;\n                } else if (mlist[i].county().compareTo(mlist[j].county()) == 0 &&\n                        Integer.parseInt(mlist[j].zipCode()) <= Integer.parseInt(mlist[i].zipCode())) {\n                    tempSmallest = mlist[i];\n                    mlist[i] = mlist[j];\n                    mlist[j] = tempSmallest;\n                }\n            }\n        }\n        System.out.println(\"\\n-list of members sorted by county and zip code-\");\n        for (int i = 0; i < size; i++) {\n            System.out.println(mlist[i].toString());\n        }\n        System.out.println(\"-end of list-\\n\");\n    } //sort by county and then zipcode\n\n    /**\n     * Prints the member database sorted by their expiration dates\n     * Sorted so that the earlier expiration dates come first\n     */\n    public void printByExpirationDate() {\n        if (size == 0) {\n            System.out.println(\"Member database is empty!\");\n            return;\n        }\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                Member tempSmallest = null;\n                if (mlist[i].expirationDate().compareTo(mlist[j].expirationDate()) >= 0) {\n                    tempSmallest = mlist[i];\n                    mlist[i] = mlist[j];\n                    mlist[j] = tempSmallest;\n                }\n            }\n        }\n        System.out.println(\"\\n-list of members sorted by membership expiration date-\");\n        for (int i = 0; i < size; i++) {\n            System.out.println(mlist[i].toString());\n        }\n        System.out.println(\"-end of list-\\n\");\n    } //sort by the expiration date\n\n    /**\n     * Prints the member database sorted by their names\n     * Sorted by last name first in alphabetical order, then their first name\n     */\n    public void printByName() {\n        if (size == 0) {\n            System.out.println(\"Member database is empty!\");\n            return;\n        }\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                Member tempSmallest = null;\n                if (mlist[i].compareTo(mlist[j]) > 0) {\n                    tempSmallest = mlist[i];\n                    mlist[i] = mlist[j];\n                    mlist[j] = tempSmallest;\n                }\n            }\n        }\n        System.out.println(\"\\n-list of members sorted by last name, and first name-\");\n        for (int i = 0; i < size; i++) {\n            System.out.println(mlist[i].toString());\n        }\n        System.out.println(\"-end of list-\\n\");\n    } //sort by last name and then first name\n\n    public void printWithFees(){\n        for(int i = 0; i < size; i++){\n            if(mlist[i].membershipFee() > 0){\n                System.out.println(mlist[i].toString());\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/projecttwo/MemberDatabase.java b/src/projecttwo/MemberDatabase.java
--- a/src/projecttwo/MemberDatabase.java	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/src/projecttwo/MemberDatabase.java	(date 1665797627128)
@@ -139,11 +139,11 @@
         for (int i = 0; i < size; i++) {
             for (int j = i + 1; j < size; j++) {
                 Member tempSmallest = null;
-                if (mlist[i].county().compareTo(mlist[j].county()) > 0) {
+                if (mlist[i].getLocation().county().compareTo(mlist[j].getLocation().county()) > 0) {
                     tempSmallest = mlist[i];
                     mlist[i] = mlist[j];
                     mlist[j] = tempSmallest;
-                } else if (mlist[i].county().compareTo(mlist[j].county()) == 0 &&
+                } else if (mlist[i].getLocation().county().compareTo(mlist[j].getLocation().county()) == 0 &&
                         Integer.parseInt(mlist[j].zipCode()) <= Integer.parseInt(mlist[i].zipCode())) {
                     tempSmallest = mlist[i];
                     mlist[i] = mlist[j];
Index: Project2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project2.iml b/Project2.iml
--- a/Project2.iml	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/Project2.iml	(date 1665705811063)
@@ -7,5 +7,31 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"7b5731b0-f7b3-4710-9b8d-67f7db849854\" name=\"Changes\" comment=\"Created checkLocationRestriction to account for standard member location restriction\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/projecttwo/FitnessClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/projecttwo/FitnessClass.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/projecttwo/GymManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/projecttwo/GymManager.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/projecttwo/MemberDatabase.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/projecttwo/MemberDatabase.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2FgWCw7s4EbOXwdJKZF2UGgurUQ\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src\" />\n      <recent name=\"$PROJECT_DIR$/src/projecttwo\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"7b5731b0-f7b3-4710-9b8d-67f7db849854\" name=\"Changes\" comment=\"\" />\n      <created>1664914083673</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1664914083673</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Created ClassSchedule\">\n      <created>1665007000408</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665007000408</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added method for reading from files and for creating a member to be added based on whether it was loaded in from file or from command line\">\n      <created>1665093859684</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665093859684</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Created constructors for Family and Premium classes, along with membershipFee method\">\n      <created>1665161163111</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665161163111</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Updated run method to call based on first character\">\n      <created>1665190748573</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665190748573</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Fixed bugs and updated method to load members from files\">\n      <created>1665209239566</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665209239566</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Added functions to return private variables\">\n      <created>1665209281117</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665209281117</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Updated constructors and toString methods\">\n      <created>1665209300932</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665209300932</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Updated workspace\">\n      <created>1665209313899</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665209313899</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Fixed bugs that prevented program from running\">\n      <created>1665215046936</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665215046936</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Fixed location bug\">\n      <created>1665220355518</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665220355518</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Created classSchedule file and method to load classes from file\">\n      <created>1665221627561</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665221627561</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Updated ClassSchedule and fixed bugs\">\n      <created>1665387559144</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665387559144</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Updated ClassSchedule and fixed bugs\">\n      <created>1665433398322</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665433398322</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Updated CheckIn method to check for all of values entered for classes\">\n      <created>1665649192067</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665649192067</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Updated dropClass method\">\n      <created>1665680051463</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665680051463</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Updated dropClass method\">\n      <created>1665680062604</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665680062604</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Created checkLocationRestriction to account for standard member location restriction\">\n      <created>1665680668879</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1665680668879</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"18\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"324ecc5d-bd1c-4c02-915b-de8ff045bdec\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"51603227-02f0-43ee-b1bb-f8cf1fe7c39a\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"72467420-c42b-4689-9e36-c53bc704e1f5\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/chris\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n        <entry key=\"e012d9b2-db6b-4fcb-a312-ca56a917046b\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"chris\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Created ClassSchedule\" />\n    <MESSAGE value=\"Updated loadMembers\" />\n    <MESSAGE value=\"Added method for reading from files and for creating a member to be added based on whether it was loaded in from file or from command line\" />\n    <MESSAGE value=\"Created constructors for Family and Premium classes, along with membershipFee method\" />\n    <MESSAGE value=\"Updated run method to call based on first character\" />\n    <MESSAGE value=\"Fixed bugs and updated method to load members from files\" />\n    <MESSAGE value=\"Added functions to return private variables\" />\n    <MESSAGE value=\"Updated constructors and toString methods\" />\n    <MESSAGE value=\"Updated workspace\" />\n    <MESSAGE value=\"Fixed bugs that prevented program from running\" />\n    <MESSAGE value=\"Fixed location bug\" />\n    <MESSAGE value=\"Created classSchedule file and method to load classes from file\" />\n    <MESSAGE value=\"Updated ClassSchedule and fixed bugs\" />\n    <MESSAGE value=\"Updated CheckIn method to check for all of values entered for classes\" />\n    <MESSAGE value=\"Updated dropClass method\" />\n    <MESSAGE value=\"Created checkLocationRestriction to account for standard member location restriction\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Created checkLocationRestriction to account for standard member location restriction\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6326faa87179db9a81f5eb1bf5b2552a1b608294)
+++ b/.idea/workspace.xml	(date 1665797831524)
@@ -1,10 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="7b5731b0-f7b3-4710-9b8d-67f7db849854" name="Changes" comment="Created checkLocationRestriction to account for standard member location restriction">
+    <list default="true" id="7b5731b0-f7b3-4710-9b8d-67f7db849854" name="Changes" comment="Fixed redundant code and started guest feature">
+      <change afterPath="$PROJECT_DIR$/src/projecttwo/DateTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Project2.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Project2.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/projecttwo/FitnessClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/projecttwo/FitnessClass.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/projecttwo/GymManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/projecttwo/GymManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/projecttwo/Member.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/projecttwo/Member.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/projecttwo/MemberDatabase.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/projecttwo/MemberDatabase.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -17,6 +20,7 @@
       <list>
         <option value="Enum" />
         <option value="Class" />
+        <option value="JUnit5 Test Class" />
       </list>
     </option>
   </component>
@@ -39,8 +43,15 @@
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
+    &quot;create.test.in.the.same.root&quot;: &quot;true&quot;,
     &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
     &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
@@ -50,8 +61,48 @@
     <key name="MoveFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/src" />
       <recent name="$PROJECT_DIR$/src/projecttwo" />
+    </key>
+    <key name="CreateTestDialog.Recents.Supers">
+      <recent name="" />
+    </key>
+    <key name="CreateTestDialog.RecentsKey">
+      <recent name="projecttwo" />
     </key>
   </component>
+  <component name="RunManager" selected="Application.RunProject2">
+    <configuration name="Date" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="projecttwo.Date" />
+      <module name="Project2" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="projecttwo.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="RunProject2" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="projecttwo.RunProject2" />
+      <module name="Project2" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="projecttwo.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.RunProject2" />
+        <item itemvalue="Application.Date" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -180,7 +231,14 @@
       <option name="project" value="LOCAL" />
       <updated>1665680668879</updated>
     </task>
-    <option name="localTasksCounter" value="18" />
+    <task id="LOCAL-00018" summary="Fixed redundant code and started guest feature">
+      <created>1665681521690</created>
+      <option name="number" value="00018" />
+      <option name="presentableId" value="LOCAL-00018" />
+      <option name="project" value="LOCAL" />
+      <updated>1665681521690</updated>
+    </task>
+    <option name="localTasksCounter" value="19" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -258,6 +316,7 @@
     <MESSAGE value="Updated CheckIn method to check for all of values entered for classes" />
     <MESSAGE value="Updated dropClass method" />
     <MESSAGE value="Created checkLocationRestriction to account for standard member location restriction" />
-    <option name="LAST_COMMIT_MESSAGE" value="Created checkLocationRestriction to account for standard member location restriction" />
+    <MESSAGE value="Fixed redundant code and started guest feature" />
+    <option name="LAST_COMMIT_MESSAGE" value="Fixed redundant code and started guest feature" />
   </component>
 </project>
\ No newline at end of file
Index: src/projecttwo/DateTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/projecttwo/DateTest.java b/src/projecttwo/DateTest.java
new file mode 100644
--- /dev/null	(date 1665705771599)
+++ b/src/projecttwo/DateTest.java	(date 1665705771599)
@@ -0,0 +1,7 @@
+package projecttwo;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class DateTest {
+
+}
\ No newline at end of file
